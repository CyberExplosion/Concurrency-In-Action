<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>16.0</VCProjectVersion>
    <Keyword>Win32Proj</Keyword>
    <ProjectGuid>{97ece8d4-9e2c-40c5-b45b-712a06933518}</ProjectGuid>
    <RootNamespace>ThreadsandConcurrency</RootNamespace>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v142</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <LinkIncremental>true</LinkIncremental>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <LinkIncremental>false</LinkIncremental>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="Chapter 3 - Don%27t pass locked reference or pointer outside the lock in any way.cpp" />
    <ClCompile Include="Chapter 3 - guideline to prevent deadlocks.cpp" />
    <ClCompile Include="Chapter 3 - Locking at correct granularity.cpp" />
    <ClCompile Include="Chapter 3 - Personal Project - Thread safe linked-list, not done.cpp" />
    <ClCompile Include="Chapter 3 - Protect data during initialization - Lazy init.cpp" />
    <ClCompile Include="Chapter 3 - Protect read write data with share lock %28rare update data%29.cpp" />
    <ClCompile Include="Chapter 3 - Simple Lock Hierarchical.cpp" />
    <ClCompile Include="Chapter 3 - Threadd-safe Stack.cpp" />
    <ClCompile Include="Chapter 3 - Transfer lock ownership using unique.cpp" />
    <ClCompile Include="Chapter 3 - unique lock.cpp" />
    <ClCompile Include="Chapter 3 - Using mutex in c++.cpp" />
    <ClCompile Include="Chapter 4 - chrono, clocks and duration.cpp" />
    <ClCompile Include="Chapter 4 - Functional Programming and QuickSort.cpp" />
    <ClCompile Include="Chapter 4 - Saving exception for future.cpp" />
    <ClCompile Include="Chapter 4 - Thread safe Queue using condition variables.cpp" />
    <ClCompile Include="Chapter 4 - Use Shared_future for wait() in many thread.cpp" />
    <ClCompile Include="Chapter 4 - Using future to return values from background task.cpp" />
    <ClCompile Include="Chapter 4 - Using packaged_task to wrap future and pass task between threads.cpp" />
    <ClCompile Include="Chapter 4 - Using promise_future handling waiting and delivery in different thread.cpp" />
    <ClCompile Include="Chapter 4 - Waiting for data to process with conditional variables.cpp" />
    <ClCompile Include="Chapter 5 - Acquire release allow transitive synchronization.cpp" />
    <ClCompile Include="Chapter 5 - Acquire Release imposed ordering on Relaxed Operations.cpp" />
    <ClCompile Include="Chapter 5 - Enforcing ordering on non-atomic - Usage of atomic irl.cpp" />
    <ClCompile Include="Chapter 5 - Free functions for atomic operation.cpp" />
    <ClCompile Include="Chapter 5 - Memory Order Consume to synchronize data - Don%27t do it.cpp" />
    <ClCompile Include="Chapter 5 - Operation on atomic bool.cpp" />
    <ClCompile Include="Chapter 5 - Operation on atomic Pointers arthimetics.cpp" />
    <ClCompile Include="Chapter 5 - Reading and writting variables from different thread - Example of ordering happens-before.cpp" />
    <ClCompile Include="Chapter 5 - Reading value from a queue with atomic operation - Release Sequence.cpp" />
    <ClCompile Include="Chapter 5 - Sequential consistency implies a total ordering - How to derive ordering in seq_cst.cpp" />
    <ClCompile Include="Chapter 5 - Uses Fence to impose order.cpp" />
    <ClCompile Include="Chapter 5 - Using atomic_flag to create a spin lock.cpp" />
    <ClCompile Include="Chapter 6 - Fine-Grained thread safe queue locking and waiting.cpp" />
    <ClCompile Include="Chapter 6 - Thread safe look up table with lock - fine grained.cpp" />
    <ClCompile Include="Chapter 6 - Thread safe queue using queue holding share pointer - Better exception handling.cpp" />
    <ClCompile Include="Chapter 6 - Thread-safe list with iteration function support - finer grained.cpp" />
    <ClCompile Include="Chapter 6 - Threaded safe stack using mutex - A class definition example.cpp" />
    <ClCompile Include="Chapter 7 - Lock-free stack with leaking memory (uses with garbage collector like Java).cpp" />
    <ClCompile Include="choose num threads at run time.cpp" />
    <ClCompile Include="Function object practice.cpp" />
    <ClCompile Include="Identifying threads.cpp" />
    <ClCompile Include="scoped_thread.cpp" />
    <ClCompile Include="thread - function object - lambda.cpp" />
    <ClCompile Include="Thread chapter 1.cpp" />
    <ClCompile Include="Threads.cpp" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>